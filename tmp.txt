cmake_minimum_required (VERSION 3.10)

project(SymphonyQG LANGUAGES CXX)

set(CXX_STANDARD 17)


# AVX512 required
include(CheckCXXSourceRuns)
set(CMAKE_REQUIRED_FLAGS "-march=native")

# check AVX512 support
set(AVX512_CXX_CODE "
#include <immintrin.h>
int main() {
    __m512 a = _mm512_set1_ps(1.0f);  // AVX512 intrinsic
    return 0;
}")
check_cxx_source_runs("${AVX512_CXX_CODE}" AVX512_RUNS)

# 检查 AVX2 支持
set(AVX2_CXX_CODE "
#include <immintrin.h>
int main() {
    __m256 a = _mm256_set1_ps(1.0f);  // AVX2 intrinsic
    return 0;
}")
check_cxx_source_runs("${AVX2_CXX_CODE}" AVX2_RUNS)

# 检查 SSE 支持
set(SSE_CXX_CODE "
#include <emmintrin.h>  // SSE2专用头文件
int main() {
    __m128i a = _mm_set1_epi32(1);  // SSE2指令
    __m128d b = _mm_set1_pd(1.0);   // SSE2双精度浮点
    return 0;
}")
check_cxx_source_runs("${SSE_CXX_CODE}" SSE_RUNS)

if (USEAVX512 OR USEAVX2 OR USESSE)
    message(STATUS "The specified SIMD instruction set is ${USEAVX512} ${USEAVX2} ${USESSE}.")
    if (USEAVX512 AND AVX512_RUNS)
        message(STATUS "Use AVX512.")
        add_compile_options(-mavx512f)
    elseif (USEAVX2 AND AVX2_RUNS)
        message(STATUS "Use AVX2.")
        add_compile_options(-mavx2)
        add_compile_options(-mno-avx512f)
    elseif (USESSE AND SSE_RUNS)
        message(STATUS "Use SSE.")
        add_compile_options(-msse4.1)
        add_compile_options(-mno-avx512f)
        add_compile_options(-mno-avx2)
    else()
        message(FATAL_ERROR "The specified SIMD instruction set is not supported by the compiler.")
    endif()
else()
    message(STATUS "No specific SIMD instruction set is specified, use default.")
    if (AVX512_RUNS)
        message(STATUS "Use AVX512.")
        add_compile_options(-mavx512f)
    elseif (AVX2_RUNS)
        message(STATUS "Use AVX2.")
        add_compile_options(-mavx2)
        add_compile_options(-mno-avx512f)
    elseif (SSE_RUNS)
        message(STATUS "Use SSE2.")
        add_compile_options(-msse4.1)
        add_compile_options(-mno-avx2)
        add_compile_options(-mno-avx512f)
    else()
        message(FATAL_ERROR "No SIMD instruction set is supported by the compiler.")
    endif()
endif()
unset(CMAKE_REQUIRED_FLAGS)

include_directories(${PROJECT_SOURCE_DIR}/symqglib)
include_directories(/usr/include/python3.11)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

set(EIGEN "-DEIGEN_DONT_PARALLELIZE")

# set Debug/Release build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
endif()
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_CXX_FLAGS "{CMAKE_CXX_FLAGS} -g -O0 -fpic -fopenmp ${TEMPLATE_CONSTANTS} ${EIGEN} -g")
    message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    # append ""-Wall -Wextra -Ofast -lrt -march=native -fpic -fopenmp -ftree-vectorize -fexceptions ${TEMPLATE_CONSTANTS} ${EIGEN} -g"" to CMAKE_CXX_FLAGS
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Ofast -lrt -march=native -fpic -fopenmp -ftree-vectorize -fexceptions ${TEMPLATE_CONSTANTS} ${EIGEN} -g")
    message(STATUS "CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}")
else()
    message(WARNING "Unknown build type: ${CMAKE_BUILD_TYPE}. No special configuration applied.")
endif()

add_subdirectory(test)
