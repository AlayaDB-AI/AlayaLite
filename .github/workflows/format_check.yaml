name: CI
on: [push]

env:
  LLVM_VERSION: 18

jobs:
  commit-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: gsactions/commit-message-checker@v2
        with:
          pattern: '^(feat|fix|docs|style|refactor|chore|perf|test|build|ci|revert)(\(\S+\))?: .+'
          error: "Invalid commit type"
          excludeDescription: "true"
          excludeTitle: "false"
          checkAllCommitMessages: "true"
          accessToken: ${{ secrets.GITHUB_TOKEN }}

  typo-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: crate-ci/typos@v1.23.6
        with:
          config: ./.typo.toml
        
  pyformat-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/ruff-action@v3
        with:
          src: >-
            ./python
            ./scripts
            ./conanfile.py
            ./examples
          args: "format --check --diff"

  # TODO(ljh): Fix the unsuccessful parts of pylint
  # pylint-check:
  #     runs-on: ubuntu-latest
  #     strategy:
  #       matrix:
  #         python-version: ["3.8"]
  #     steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install pylint
  #     - name: Analysing the code with pylint
  #       run: |
  #         pylint --rcfile ./python/.pylintrc ./examples/**/*.py ./python/src/alayalite/**/*.py ./python/tests/**/*.py


  cpp-linter:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    # needs: [typo-check, commit-check, python-format-check]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Caches
        uses: ./.github/actions/cache-restore
      
      - name: Set up C++ environment
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm-${{ env.LLVM_VERSION }}
          cpplint: true
          clang-tidy: true
          clang-format: true
          cmake: true
          ninja: true
          conan: true

      - name: Prepare compile_commands.json
        run: |
          mkdir -p build 
          cd build 
          clang++ --version
          CC=clang CXX=clang++ cmake .. -G Ninja -DENABLE_UNIT_TESTS=ON -DENABLE_COVERAGE=ON

      - name: run check
        run: |
          ./scripts/ci/cpplint/ci_script.sh
